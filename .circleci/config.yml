version: 2.1
orbs:
  aws-cli: circleci/aws-cli@3.1.1
  python: circleci/python@2.1.1
jobs:
  fern-check:
    docker:
      - image: cimg/node:current
    resource_class: medium
    steps:
      - checkout
      - run: 
          name: Install fern
          command: sudo npm install -g fern-api
      - run: fern check
      - run:
          name: Verify generated files are up to date
          command: |
            export FERN_TOKEN="${FERN_ORG_TOKEN_PROD}"
            fern generate --log-level debug
            git --no-pager diff --exit-code


  check:
    executor: python/default
    steps:
      - checkout
      - python/install-packages:
          pkg-manager: poetry
      - run:
          name: Type check
          command: poetry run mypy
      - run:
          name: pre-commit
          command: poetry run pre-commit run --all-files

  test:
    machine:
      image: ubuntu-2004:current
    steps:
      - checkout
      - run: curl -sSL https://install.python-poetry.org | python3 -
      - run: /home/circleci/.local/bin/poetry install --no-ansi
      - run:
          name: test
          command: /home/circleci/.local/bin/poetry run pytest -sv
    
  generate-sdks:
    docker:
      - image: cimg/node:current
    resource_class: medium
    steps:
      - checkout
      - run: 
          name: Install fern
          command: sudo npm install -g fern-api
      - run: | 
          export FERN_TOKEN="${FERN_ORG_TOKEN_PROD}"
          git_version="$(scripts/git-version.sh)"
          fern generate --group sdks --version "${git_version}" --log-level debug

  generate-docs:
    docker:
      - image: cimg/node:current
    resource_class: medium
    steps:
      - checkout
      - run: 
          name: Install fern
          command: sudo npm install -g fern-api
      - run: | 
          export FERN_TOKEN="${FERN_ORG_TOKEN_PROD}"
          git_version="$(scripts/git-version.sh)"
          fern generate --group docs --version "${git_version}" --log-level debug
  
  publish-docker: 
    machine: 
      image: ubuntu-2004:current
    steps: 
      - checkout
      - run: 
          name: Publish docker
          command: | 
            git_version="$(scripts/git-version.sh)"
            ./create_docker.sh "${git_version}"
            echo "$FERNAPI_DOCKER_HUB_PASSWORD" | docker login --username fernapi --password-stdin
            docker tag venus:"${git_version}" fernapi/venus:"${git_version}"
            docker push fernapi/venus:"${git_version}"

  deploy-dev:
    machine:
      image: ubuntu-2004:current
    steps:
      - checkout
      - aws-cli/setup
      - run:
          name: cdk deploy
          command: |
            git_version="$(scripts/git-version.sh)"
            ./create_docker.sh "${git_version}"
            cd deploy
            npm install
            VERSION="${git_version}" npm run cdk deploy venus-dev --require-approval never --progress events
  
  deploy-prod:
    machine:
      image: ubuntu-2004:current
    steps:
      - checkout
      - aws-cli/setup
      - run:
          name: cdk deploy
          command: |
            git_version="$(scripts/git-version.sh)"
            ./create_docker.sh "${git_version}"
            cd deploy
            npm install
            VERSION="${git_version}" npm run cdk deploy venus-prod --require-approval never --progress events

workflows:
  version: 2
  build:
    jobs:
      - fern-check:
          filters: { tags: { only: /.*/ } }
          context: 
            - fern-tokens


      - check:
          filters:
            tags:
              only: /.*/

      - test:
          filters:
            tags:
              only: /.*/
      
      - generate-sdks: 
          filters:
            branches:
              only: main
            tags:
              only: /.*/
          context: 
            - fern-tokens
          requires:
            - check
            - test
      
      - generate-docs: 
          filters:
            branches:
              ignore: /.*/
            tags:
              only:
                - /.*/
          context: 
            - fern-tokens
            - postman
          requires:
            - check
            - test

      - deploy-dev:
          filters:
            branches:
              only: main
          context:
            - aws
            - github
            - fern-dev
            - venus-dev
          requires:
            - check
            - test
      
      - deploy-prod:
          filters:
            branches:
              ignore: /.*/
            tags:
              only:
                - /.*/
          context:
            - aws
            - github
            - fern-prod
            - venus-prod
          requires:
            - check
            - test
    
      - publish-docker: 
          filters:
            branches:
              only: main
            tags:
              only:
                - /.*/
          context:
            - docker-hub
